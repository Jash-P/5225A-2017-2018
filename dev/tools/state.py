from sys import argv

print('#define PUSH_STATE(machine, state, code) \\')
print('{ \\')
print('  int machine##Last = machine##State; \\')
print('  machine##Set(state); \\')
print('  { code } \\')
print('  machine##Set(machine##Last); \\')
print('}')
print()

print('#define IS_CONFIGURED(machine) (machine##State != -1)')
print('#define NEXT_STATE(new_state) { state = new_state; goto top; }')
print()

print('#define DECLARE_MACHINE(machine, states) \\')
print('void machine##Setup(); \\')
print('void machine##Set(states state); \\')
print('void machine##Set(states state, long arg); \\')
print('void machine##Set(states state, long arg, bool detached); \\')
print('void machine##Reset(); \\')
print('void machine##TimeoutWhile(states state, unsigned long timeout, const unsigned char *routine, unsigned short id, bool kill = true); \\')
print('void machine##TimeoutUntil(states state, unsigned long timeout, const unsigned char *routine, unsigned short id, bool kill = true); \\')
print()

print('#define MAKE_MACHINE(machine, states, base, handler) \\')
print('states machine##State = -1; \\')
print('long machine##Arg = 0; \\')
print('void machine##Internal(states state) \\')
print('{ \\')
print('  long &arg = machine##Arg; \\')
print('  top: \\')
print('  writeDebugStreamLine("%d " #machine " %d -> %d, %x", nPgmTime, machine##State, state, arg); \\')
print('  switch (machine##State = state) \\')
print('  handler \\')
print('} \\')
print('NEW_ASYNC_VOID_1(machine##Internal, states); \\')
print('void machine##Setup() \\')
print('{ \\')
print('  if (IS_CONFIGURED(machine)) \\')
print('    machine##InternalKill(); \\')
print('  machine##Arg = 0; \\')
print('  machine##InternalAsync(base); \\')
print('  writeDebugStreamLine("Init " #machine " - " #base); \\')
print('} \\')
print('void machine##Set(states state) \\')
print('{ \\')
print('  if (nCurrentTask != ASYNC_TASK_NAME(machine##Internal)) \\')
print('    machine##InternalKill(); \\')
print('  machine##InternalAsync(state); \\')
print('} \\')
print('void machine##Set(states state, long arg) \\')
print('{ \\')
print('  if (nCurrentTask != ASYNC_TASK_NAME(machine##Internal)) \\')
print('    machine##InternalKill(); \\')
print('  machine##Arg = arg; \\')
print('  machine##InternalAsync(state); \\')
print('} \\')
print('void machine##Set(states state, long arg, bool detached) \\')
print('{ \\')
print('  if (nCurrentTask != ASYNC_TASK_NAME(machine##Internal)) \\')
print('    machine##InternalKill(); \\')
print('  machine##Arg = arg; \\')
print('  machine##InternalAsync(state, detached); \\')
print('} \\')
print('void machine##Reset() \\')
print('{ \\')
print('  machine##Set(base, 0); \\')
print('} \\')
print('void machine##TimeoutWhile(states state, unsigned long timeout, const unsigned char *routine, unsigned short id, bool kill) \\')
print('{ \\')
print('  timeoutWhileEqual(&machine##State, &state, sizeof(states), timeout, routine, id, kill); \\')
print('} \\')
print('void machine##TimeoutUntil(states state, unsigned long timeout, const unsigned char *routine, unsigned short id, bool kill) \\')
print('{ \\')
print('  timeoutWhileNotEqual(&machine##State, &state, sizeof(states), timeout, routine, id, kill); \\')
print('}')
print()

for i in range(1, int(argv[1]) + 1):
    print('#define MAKE_ASYNC_ONLY_MACHINE_%d(machine, baseImpl, %s) \\'
          % (i, ', '.join('argc%d, argv%d, after%d' % (j, j, j) for j in range(i))))
    print('typedef enum _asyncStates_##machine { \\')
    print('  machine##NotRunning, \\')
    for j in range(i):
        print('  __ASYNC_STATE_NAME_##argc%d argv%d %s \\' % (j, j, ',' if j < i - 1 else ''))
    print('} sAsyncStates_##machine; \\')
    print('DECLARE_MACHINE(machine, sAsyncStates_##machine) \\')
    for j in range(i):
        print('__ASYNC_STATE_INTERNAL(machine, __ASYNC_STATE_NAME_##argc%d argv%d, argc%d, argv%d) \\' % (j, j, j, j))
    print('MAKE_MACHINE(machine, sAsyncStates_##machine, machine##NotRunning, { \\')
    print('case machine##NotRunning: \\')
    print('  { baseImpl } \\')
    print('  break; \\')
    for j in range(i):
        print('case __ASYNC_STATE_NAME_##argc%d argv%d : \\' % (j, j))
        print('  __ASYNC_STATE_INVOKE_##argc%d argv%d \\' % (j, j))
        print('  { after%d } \\' % j)
        print('  NEXT_STATE(machine##NotRunning) \\')
    print('})')
    print()
