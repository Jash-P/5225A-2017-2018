/* Enumerations */
typedef enum _tRequest
{
	requestIdle,
	requestActive,
	requestConfirmed
} tRequest;

//*!! Code automatically generated by '5225' async creator !!*//
#define NEW_ASYNC(retType, name, code) bool name##Running = false; retType name##Return; \
retType name##InternalAsync() { code } \
task name##Task { name##Return = name##InternalAsync(); name##Running = false; } \
void name##Async() { name##Running = true; \
startTask(name##Task); } \
retType name##Await() { while (name##Running) { sleep(1); } return name##Return; } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_1(retType, name, type1, name1, code) bool name##Running = false; retType name##Return; \
type1 name##Param1; \
retType name##InternalAsync() { type1 name1 = name##Param1; code } \
task name##Task { name##Return = name##InternalAsync(); name##Running = false; } \
void name##Async(type1 name1) { name##Running = true; \
name##Param1 = name1; \
startTask(name##Task); } \
retType name##Await() { while (name##Running) { sleep(1); } return name##Return; } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_2(retType, name, type1, name1, type2, name2, code) bool name##Running = false; retType name##Return; \
type1 name##Param1; type2 name##Param2; \
retType name##InternalAsync() { type1 name1 = name##Param1; type2 name2 = name##Param2; code } \
task name##Task { name##Return = name##InternalAsync(); name##Running = false; } \
void name##Async(type1 name1, type2 name2) { name##Running = true; \
name##Param1 = name1; name##Param2 = name2; \
startTask(name##Task); } \
retType name##Await() { while (name##Running) { sleep(1); } return name##Return; } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_3(retType, name, type1, name1, type2, name2, type3, name3, code) bool name##Running = false; retType name##Return; \
type1 name##Param1; type2 name##Param2; type3 name##Param3; \
retType name##InternalAsync() { type1 name1 = name##Param1; type2 name2 = name##Param2; type3 name3 = name##Param3; code } \
task name##Task { name##Return = name##InternalAsync(); name##Running = false; } \
void name##Async(type1 name1, type2 name2, type3 name3) { name##Running = true; \
name##Param1 = name1; name##Param2 = name2; name##Param3 = name3; \
startTask(name##Task); } \
retType name##Await() { while (name##Running) { sleep(1); } return name##Return; } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_4(retType, name, type1, name1, type2, name2, type3, name3, type4, name4, code) bool name##Running = false; retType name##Return; \
type1 name##Param1; type2 name##Param2; type3 name##Param3; type4 name##Param4; \
retType name##InternalAsync() { type1 name1 = name##Param1; type2 name2 = name##Param2; type3 name3 = name##Param3; type4 name4 = name##Param4; code } \
task name##Task { name##Return = name##InternalAsync(); name##Running = false; } \
void name##Async(type1 name1, type2 name2, type3 name3, type4 name4) { name##Running = true; \
name##Param1 = name1; name##Param2 = name2; name##Param3 = name3; name##Param4 = name4; \
startTask(name##Task); } \
retType name##Await() { while (name##Running) { sleep(1); } return name##Return; } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_5(retType, name, type1, name1, type2, name2, type3, name3, type4, name4, type5, name5, code) bool name##Running = false; retType name##Return; \
type1 name##Param1; type2 name##Param2; type3 name##Param3; type4 name##Param4; type5 name##Param5; \
retType name##InternalAsync() { type1 name1 = name##Param1; type2 name2 = name##Param2; type3 name3 = name##Param3; type4 name4 = name##Param4; type5 name5 = name##Param5; code } \
task name##Task { name##Return = name##InternalAsync(); name##Running = false; } \
void name##Async(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5) { name##Running = true; \
name##Param1 = name1; name##Param2 = name2; name##Param3 = name3; name##Param4 = name4; name##Param5 = name5; \
startTask(name##Task); } \
retType name##Await() { while (name##Running) { sleep(1); } return name##Return; } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_6(retType, name, type1, name1, type2, name2, type3, name3, type4, name4, type5, name5, type6, name6, code) bool name##Running = false; retType name##Return; \
type1 name##Param1; type2 name##Param2; type3 name##Param3; type4 name##Param4; type5 name##Param5; type6 name##Param6; \
retType name##InternalAsync() { type1 name1 = name##Param1; type2 name2 = name##Param2; type3 name3 = name##Param3; type4 name4 = name##Param4; type5 name5 = name##Param5; type6 name6 = name##Param6; code } \
task name##Task { name##Return = name##InternalAsync(); name##Running = false; } \
void name##Async(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6) { name##Running = true; \
name##Param1 = name1; name##Param2 = name2; name##Param3 = name3; name##Param4 = name4; name##Param5 = name5; name##Param6 = name6; \
startTask(name##Task); } \
retType name##Await() { while (name##Running) { sleep(1); } return name##Return; } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_7(retType, name, type1, name1, type2, name2, type3, name3, type4, name4, type5, name5, type6, name6, type7, name7, code) bool name##Running = false; retType name##Return; \
type1 name##Param1; type2 name##Param2; type3 name##Param3; type4 name##Param4; type5 name##Param5; type6 name##Param6; type7 name##Param7; \
retType name##InternalAsync() { type1 name1 = name##Param1; type2 name2 = name##Param2; type3 name3 = name##Param3; type4 name4 = name##Param4; type5 name5 = name##Param5; type6 name6 = name##Param6; type7 name7 = name##Param7; code } \
task name##Task { name##Return = name##InternalAsync(); name##Running = false; } \
void name##Async(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7) { name##Running = true; \
name##Param1 = name1; name##Param2 = name2; name##Param3 = name3; name##Param4 = name4; name##Param5 = name5; name##Param6 = name6; name##Param7 = name7; \
startTask(name##Task); } \
retType name##Await() { while (name##Running) { sleep(1); } return name##Return; } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_8(retType, name, type1, name1, type2, name2, type3, name3, type4, name4, type5, name5, type6, name6, type7, name7, type8, name8, code) bool name##Running = false; retType name##Return; \
type1 name##Param1; type2 name##Param2; type3 name##Param3; type4 name##Param4; type5 name##Param5; type6 name##Param6; type7 name##Param7; type8 name##Param8; \
retType name##InternalAsync() { type1 name1 = name##Param1; type2 name2 = name##Param2; type3 name3 = name##Param3; type4 name4 = name##Param4; type5 name5 = name##Param5; type6 name6 = name##Param6; type7 name7 = name##Param7; type8 name8 = name##Param8; code } \
task name##Task { name##Return = name##InternalAsync(); name##Running = false; } \
void name##Async(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8) { name##Running = true; \
name##Param1 = name1; name##Param2 = name2; name##Param3 = name3; name##Param4 = name4; name##Param5 = name5; name##Param6 = name6; name##Param7 = name7; name##Param8 = name8; \
startTask(name##Task); } \
retType name##Await() { while (name##Running) { sleep(1); } return name##Return; } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_9(retType, name, type1, name1, type2, name2, type3, name3, type4, name4, type5, name5, type6, name6, type7, name7, type8, name8, type9, name9, code) bool name##Running = false; retType name##Return; \
type1 name##Param1; type2 name##Param2; type3 name##Param3; type4 name##Param4; type5 name##Param5; type6 name##Param6; type7 name##Param7; type8 name##Param8; type9 name##Param9; \
retType name##InternalAsync() { type1 name1 = name##Param1; type2 name2 = name##Param2; type3 name3 = name##Param3; type4 name4 = name##Param4; type5 name5 = name##Param5; type6 name6 = name##Param6; type7 name7 = name##Param7; type8 name8 = name##Param8; type9 name9 = name##Param9; code } \
task name##Task { name##Return = name##InternalAsync(); name##Running = false; } \
void name##Async(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9) { name##Running = true; \
name##Param1 = name1; name##Param2 = name2; name##Param3 = name3; name##Param4 = name4; name##Param5 = name5; name##Param6 = name6; name##Param7 = name7; name##Param8 = name8; name##Param9 = name9; \
startTask(name##Task); } \
retType name##Await() { while (name##Running) { sleep(1); } return name##Return; } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_10(retType, name, type1, name1, type2, name2, type3, name3, type4, name4, type5, name5, type6, name6, type7, name7, type8, name8, type9, name9, type10, name10, code) bool name##Running = false; retType name##Return; \
type1 name##Param1; type2 name##Param2; type3 name##Param3; type4 name##Param4; type5 name##Param5; type6 name##Param6; type7 name##Param7; type8 name##Param8; type9 name##Param9; type10 name##Param10; \
retType name##InternalAsync() { type1 name1 = name##Param1; type2 name2 = name##Param2; type3 name3 = name##Param3; type4 name4 = name##Param4; type5 name5 = name##Param5; type6 name6 = name##Param6; type7 name7 = name##Param7; type8 name8 = name##Param8; type9 name9 = name##Param9; type10 name10 = name##Param10; code } \
task name##Task { name##Return = name##InternalAsync(); name##Running = false; } \
void name##Async(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10) { name##Running = true; \
name##Param1 = name1; name##Param2 = name2; name##Param3 = name3; name##Param4 = name4; name##Param5 = name5; name##Param6 = name6; name##Param7 = name7; name##Param8 = name8; name##Param9 = name9; name##Param10 = name10; \
startTask(name##Task); } \
retType name##Await() { while (name##Running) { sleep(1); } return name##Return; } \
void name##Stop() { stopTask(name##Task); name##Running = false; }


#define NEW_ASYNC_VOID(name, code) bool name##Running = false; \
task name##Task { code name##Running = false; } \
void name##Async() { name##Running = true; \
startTask(name##Task); } \
void name##Await() { while (name##Running) { sleep(1); } } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_VOID_1(name, type1, name1, code) bool name##Running = false; \
type1 name##Param1; \
task name##Task { type1 name1 = name##Param1; code name##Running = false; } \
void name##Async(type1 name1) { name##Running = true; \
name##Param1 = name1; \
startTask(name##Task); } \
void name##Await() { while (name##Running) { sleep(1); } } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_VOID_2(name, type1, name1, type2, name2, code) bool name##Running = false; \
type1 name##Param1; type2 name##Param2; \
task name##Task { type1 name1 = name##Param1; type2 name2 = name##Param2; code name##Running = false; } \
void name##Async(type1 name1, type2 name2) { name##Running = true; \
name##Param1 = name1; name##Param2 = name2; \
startTask(name##Task); } \
void name##Await() { while (name##Running) { sleep(1); } } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_VOID_3(name, type1, name1, type2, name2, type3, name3, code) bool name##Running = false; \
type1 name##Param1; type2 name##Param2; type3 name##Param3; \
task name##Task { type1 name1 = name##Param1; type2 name2 = name##Param2; type3 name3 = name##Param3; code name##Running = false; } \
void name##Async(type1 name1, type2 name2, type3 name3) { name##Running = true; \
name##Param1 = name1; name##Param2 = name2; name##Param3 = name3; \
startTask(name##Task); } \
void name##Await() { while (name##Running) { sleep(1); } } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_VOID_4(name, type1, name1, type2, name2, type3, name3, type4, name4, code) bool name##Running = false; \
type1 name##Param1; type2 name##Param2; type3 name##Param3; type4 name##Param4; \
task name##Task { type1 name1 = name##Param1; type2 name2 = name##Param2; type3 name3 = name##Param3; type4 name4 = name##Param4; code name##Running = false; } \
void name##Async(type1 name1, type2 name2, type3 name3, type4 name4) { name##Running = true; \
name##Param1 = name1; name##Param2 = name2; name##Param3 = name3; name##Param4 = name4; \
startTask(name##Task); } \
void name##Await() { while (name##Running) { sleep(1); } } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_VOID_5(name, type1, name1, type2, name2, type3, name3, type4, name4, type5, name5, code) bool name##Running = false; \
type1 name##Param1; type2 name##Param2; type3 name##Param3; type4 name##Param4; type5 name##Param5; \
task name##Task { type1 name1 = name##Param1; type2 name2 = name##Param2; type3 name3 = name##Param3; type4 name4 = name##Param4; type5 name5 = name##Param5; code name##Running = false; } \
void name##Async(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5) { name##Running = true; \
name##Param1 = name1; name##Param2 = name2; name##Param3 = name3; name##Param4 = name4; name##Param5 = name5; \
startTask(name##Task); } \
void name##Await() { while (name##Running) { sleep(1); } } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_VOID_6(name, type1, name1, type2, name2, type3, name3, type4, name4, type5, name5, type6, name6, code) bool name##Running = false; \
type1 name##Param1; type2 name##Param2; type3 name##Param3; type4 name##Param4; type5 name##Param5; type6 name##Param6; \
task name##Task { type1 name1 = name##Param1; type2 name2 = name##Param2; type3 name3 = name##Param3; type4 name4 = name##Param4; type5 name5 = name##Param5; type6 name6 = name##Param6; code name##Running = false; } \
void name##Async(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6) { name##Running = true; \
name##Param1 = name1; name##Param2 = name2; name##Param3 = name3; name##Param4 = name4; name##Param5 = name5; name##Param6 = name6; \
startTask(name##Task); } \
void name##Await() { while (name##Running) { sleep(1); } } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_VOID_7(name, type1, name1, type2, name2, type3, name3, type4, name4, type5, name5, type6, name6, type7, name7, code) bool name##Running = false; \
type1 name##Param1; type2 name##Param2; type3 name##Param3; type4 name##Param4; type5 name##Param5; type6 name##Param6; type7 name##Param7; \
task name##Task { type1 name1 = name##Param1; type2 name2 = name##Param2; type3 name3 = name##Param3; type4 name4 = name##Param4; type5 name5 = name##Param5; type6 name6 = name##Param6; type7 name7 = name##Param7; code name##Running = false; } \
void name##Async(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7) { name##Running = true; \
name##Param1 = name1; name##Param2 = name2; name##Param3 = name3; name##Param4 = name4; name##Param5 = name5; name##Param6 = name6; name##Param7 = name7; \
startTask(name##Task); } \
void name##Await() { while (name##Running) { sleep(1); } } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_VOID_8(name, type1, name1, type2, name2, type3, name3, type4, name4, type5, name5, type6, name6, type7, name7, type8, name8, code) bool name##Running = false; \
type1 name##Param1; type2 name##Param2; type3 name##Param3; type4 name##Param4; type5 name##Param5; type6 name##Param6; type7 name##Param7; type8 name##Param8; \
task name##Task { type1 name1 = name##Param1; type2 name2 = name##Param2; type3 name3 = name##Param3; type4 name4 = name##Param4; type5 name5 = name##Param5; type6 name6 = name##Param6; type7 name7 = name##Param7; type8 name8 = name##Param8; code name##Running = false; } \
void name##Async(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8) { name##Running = true; \
name##Param1 = name1; name##Param2 = name2; name##Param3 = name3; name##Param4 = name4; name##Param5 = name5; name##Param6 = name6; name##Param7 = name7; name##Param8 = name8; \
startTask(name##Task); } \
void name##Await() { while (name##Running) { sleep(1); } } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_VOID_9(name, type1, name1, type2, name2, type3, name3, type4, name4, type5, name5, type6, name6, type7, name7, type8, name8, type9, name9, code) bool name##Running = false; \
type1 name##Param1; type2 name##Param2; type3 name##Param3; type4 name##Param4; type5 name##Param5; type6 name##Param6; type7 name##Param7; type8 name##Param8; type9 name##Param9; \
task name##Task { type1 name1 = name##Param1; type2 name2 = name##Param2; type3 name3 = name##Param3; type4 name4 = name##Param4; type5 name5 = name##Param5; type6 name6 = name##Param6; type7 name7 = name##Param7; type8 name8 = name##Param8; type9 name9 = name##Param9; code name##Running = false; } \
void name##Async(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9) { name##Running = true; \
name##Param1 = name1; name##Param2 = name2; name##Param3 = name3; name##Param4 = name4; name##Param5 = name5; name##Param6 = name6; name##Param7 = name7; name##Param8 = name8; name##Param9 = name9; \
startTask(name##Task); } \
void name##Await() { while (name##Running) { sleep(1); } } \
void name##Stop() { stopTask(name##Task); name##Running = false; }

#define NEW_ASYNC_VOID_10(name, type1, name1, type2, name2, type3, name3, type4, name4, type5, name5, type6, name6, type7, name7, type8, name8, type9, name9, type10, name10, code) bool name##Running = false; \
type1 name##Param1; type2 name##Param2; type3 name##Param3; type4 name##Param4; type5 name##Param5; type6 name##Param6; type7 name##Param7; type8 name##Param8; type9 name##Param9; type10 name##Param10; \
task name##Task { type1 name1 = name##Param1; type2 name2 = name##Param2; type3 name3 = name##Param3; type4 name4 = name##Param4; type5 name5 = name##Param5; type6 name6 = name##Param6; type7 name7 = name##Param7; type8 name8 = name##Param8; type9 name9 = name##Param9; type10 name10 = name##Param10; code name##Running = false; } \
void name##Async(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10) { name##Running = true; \
name##Param1 = name1; name##Param2 = name2; name##Param3 = name3; name##Param4 = name4; name##Param5 = name5; name##Param6 = name6; name##Param7 = name7; name##Param8 = name8; name##Param9 = name9; name##Param10 = name10; \
startTask(name##Task); } \
void name##Await() { while (name##Running) { sleep(1); } } \
void name##Stop() { stopTask(name##Task); name##Running = false; }
